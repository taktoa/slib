;;; "scheme2c.init" Initialisation for SLIB for Scheme->C on Sun -*-scheme-*-
;;; Authors: David Love and Aubrey Jaffer
;;;
;;; This code is in the public domain.

;;Modified by David Love (d.love@daresbury.ac.uk) 10/12/91
;; NB this is for the 01nov91 (and, presumably, later ones,
;; although those may not need the bug fixes done at the end).
;; Earlier versions definitely aren't rev4 conformant.  Check
;; `ieee-floating-point' and `system' in slib:features for non-Sun un*x
;; versions and `system' and the vicinity stuff (at least) for
;; non-un*x versions.

;; Of course, if you make serious use of library functions you'll want
;; to compile them and  use Scheme->C modules.
(define (software-type) 'unix)

;;; (scheme-implementation-type) should return the name of the scheme
;;; implementation loading this file.
(define (scheme-implementation-type) 'Scheme->C)

;;; (scheme-implementation-home-page) should return a (string) URI
;;; (Uniform Resource Identifier) for this scheme implementation's home
;;; page; or false if there isn't one.
(define (scheme-implementation-home-page)
  "http://www-2.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/scheme/impl/scheme2c/0.html")

;;; (scheme-implementation-version) should return a string describing
;;; the version the scheme implementation loading this file.
(define (scheme-implementation-version) "?01nov91")

(define implementation-vicinity
  (let ((impl-path
	 (case (software-type)
	   ((unix) "/usr/local/src/scheme/")
	   ((vms) "scheme$src:")
	   ((ms-dos) "C:\\scheme\\")
	   (else ""))))
    (lambda () impl-path)))

;;; (library-vicinity) should be defined to be the pathname of the
;;; directory where files of Scheme library functions reside.
(define library-vicinity
  (let ((library-path
	 (case (software-type)
	   ((unix) "/usr/local/lib/slib/")
	   ((vms) "lib$scheme:")
	   ((ms-dos) "C:\\SLIB\\")
	   (else ""))))
    (lambda () library-path)))

;;; (home-vicinity) should return the vicinity of the user's HOME
;;; directory, the directory which typically contains files which
;;; customize a computer environment for a user.
(define (home-vicinity)
  (let ((home (getenv "HOME")))
    (and home
	 (case (software-type)
	   ((unix coherent ms-dos)	;V7 unix has a / on HOME
	    (if (eqv? #\/ (string-ref home (+ -1 (string-length home))))
		home
		(string-append home "/")))
	   (else home)))))
;@
(define in-vicinity string-append)
;@
(define (user-vicinity)
  (case (software-type)
    ((vms)	"[.]")
    (else	"")))

(define *load-pathname* #f)
;@
(define vicinity:suffix?
  (let ((suffi
	 (case (software-type)
	   ((amiga)				'(#\: #\/))
	   ((macos thinkc)			'(#\:))
	   ((ms-dos windows atarist os/2)	'(#\\ #\/))
	   ((nosve)				'(#\: #\.))
	   ((unix coherent plan9)		'(#\/))
	   ((vms)				'(#\: #\]))
	   (else
	    (slib:warn "require.scm" 'unknown 'software-type (software-type))
	    "/"))))
    (lambda (chr) (and (memv chr suffi) #t))))
;@
(define (pathname->vicinity pathname)
  (let loop ((i (- (string-length pathname) 1)))
    (cond ((negative? i) "")
	  ((vicinity:suffix? (string-ref pathname i))
	   (substring pathname 0 (+ i 1)))
	  (else (loop (- i 1))))))
(define (program-vicinity)
  (if *load-pathname*
      (pathname->vicinity *load-pathname*)
      (slib:error 'program-vicinity " called; use slib:load to load")))
;@
(define sub-vicinity
  (case (software-type)
    ((vms) (lambda (vic name)
	     (let ((l (string-length vic)))
	       (if (or (zero? (string-length vic))
		       (not (char=? #\] (string-ref vic (- l 1)))))
		   (string-append vic "[" name "]")
		   (string-append (substring vic 0 (- l 1))
				  "." name "]")))))
    (else (let ((*vicinity-suffix*
		 (case (software-type)
		   ((nosve) ".")
		   ((macos thinkc) ":")
		   ((ms-dos windows atarist os/2) "\\")
		   ((unix coherent plan9 amiga) "/"))))
	    (lambda (vic name)
	      (string-append vic name *vicinity-suffix*))))))
;@
(define (make-vicinity <pathname>) <pathname>)
;@
(define with-load-pathname
  (let ((exchange
	 (lambda (new)
	   (let ((old *load-pathname*))
	     (set! *load-pathname* new)
	     old))))
    (lambda (path thunk)
      (let* ((old (exchange path))
	     (val (thunk)))
	(exchange old)
	val))))

;;@ SLIB:FEATURES is a list of symbols naming the (SLIB) features
;;; initially supported by this implementation.
(define slib:features
      '(
	source				;can load scheme source files
					;(SLIB:LOAD-SOURCE "filename")
;;;	compiled			;can load compiled files
					;(SLIB:LOAD-COMPILED "filename")
	vicinity
	srfi-59
	srfi-96

		       ;; Scheme report features
   ;; R5RS-compliant implementations should provide all 9 features.

;;;	r5rs				;conforms to
;;;	eval				;R5RS two-argument eval
;;;	values				;R5RS multiple values
;;;	dynamic-wind			;R5RS dynamic-wind
;;;	macro				;R5RS high level macros
	delay				;has DELAY and FORCE
	multiarg-apply			;APPLY can take more than 2 args.
	char-ready?
	rev4-optional-procedures	;LIST-TAIL, STRING-COPY,
					;STRING-FILL!, and VECTOR-FILL!

      ;; These four features are optional in both R4RS and R5RS

	multiarg/and-			;/ and - can take more than 2 args.
	rationalize
	transcript			;TRANSCRIPT-ON and TRANSCRIPT-OFF
	with-file			;has WITH-INPUT-FROM-FILE and
					;WITH-OUTPUT-TO-FILE

	r4rs				;conforms to
	;; Follows rev4 as far as I can tell, modulo '() being false,
	;; number syntax (see doc), incomplete tail recursion (see
	;; docs) and a couple of bugs in some versions -- see below.

;;;	ieee-p1178			;conforms to

	r3rs				;conforms to

;;;	rev2-procedures			;SUBSTRING-MOVE-LEFT!,
					;SUBSTRING-MOVE-RIGHT!,
					;SUBSTRING-FILL!,
					;STRING-NULL?, APPEND!, 1+,
					;-1+, <?, <=?, =?, >?, >=?
	object-hash			;has OBJECT-HASH

	full-continuation		;can return multiple times
	ieee-floating-point		;conforms to IEEE Standard 754-1985
					;IEEE Standard for Binary
					;Floating-Point Arithmetic.

			;; Other common features

;;;	srfi-0				;srfi-0, COND-EXPAND finds all srfi-*
;;;	sicp				;runs code from Structure and
					;Interpretation of Computer
					;Programs by Abelson and Sussman.
	defmacro			;has Common Lisp DEFMACRO
;;;	record				;has user defined data structures
	string-port			;has CALL-WITH-INPUT-STRING and
					;CALL-WITH-OUTPUT-STRING
;;;	sort
	pretty-print
;;;	object->string
	format				;Common-lisp output formatting
	trace				;has macros: TRACE and UNTRACE
;;;	compiler			;has (COMPILER)
;;;	ed				;(ED) is editor
	system				;posix (system <string>)
;;;	getenv				;posix (getenv <string>)
;;;	program-arguments		;returns list of strings (argv)
;;;	current-time			;returns time in seconds since 1/1/1970

		  ;; Implementation Specific features

	))

(define pretty-print pp)

;;@ (FILE-POSITION <port> . <k>)
(define (file-position . args) #f)

;;; (OUTPUT-PORT-WIDTH <port>)
(define (output-port-width . arg) 79)

;;; (OUTPUT-PORT-HEIGHT <port>)
(define (output-port-height . arg) 24)

;;; (CURRENT-ERROR-PORT)
(define current-error-port
  (let ((port (current-output-port)))
    (lambda () port)))

;;; (TMPNAM) makes a temporary file name.
(define tmpnam
  (let ((cntr 100))
    (lambda () (set! cntr (+ 1 cntr))
	    (let ((tmp (string-append "slib_" (number->string cntr))))
	      (if (file-exists? tmp) (tmpnam) tmp)))))

;;; (FILE-EXISTS? <string>)
(define (file-exists? f)
  (case (software-type)
    ((unix) (zero? (system (string-append "test -f '" f "'"))))
    (else (slib:error "FILE-EXISTS? not defined for " software-type))))

;;; (DELETE-FILE <string>)
(define (delete-file f)
  (case (software-type)
    ((unix) (zero? (system (string-append "rm '" f "'"))))
    (else (slib:error "DELETE-FILE not defined for " software-type))))

;;; FORCE-OUTPUT flushes any pending output on optional arg output port
;;; use this definition if your system doesn't have such a procedure.
(define force-output flush-buffer)

;;; CALL-WITH-INPUT-STRING and CALL-WITH-OUTPUT-STRING are the string
;;; port versions of CALL-WITH-*PUT-FILE.
(define (call-with-output-string f)
  (let ((outsp (open-output-string)))
    (f outsp)
    (let ((s (get-output-string outsp)))
;;;   (close-output-port outsp)		;doesn't work
      s)))

(define (call-with-input-string s f)
  (let* ((insp (open-input-string s))
	 (res (f insp)))
    (close-input-port insp)
    res))

(define (make-exchanger obj)
  (lambda (rep) (let ((old obj)) (set! obj rep) old)))
(define (open-file filename modes)
  (case modes
    ((r rb) (open-input-file filename))
    ((w wb) (open-output-file filename))
    (else (slib:error 'open-file 'mode? modes))))
(define (port? obj) (or (input-port? port) (output-port? port)))
(define (call-with-open-ports . ports)
  (define proc (car ports))
  (cond ((procedure? proc) (set! ports (cdr ports)))
	(else (set! ports (reverse ports))
	      (set! proc (car ports))
	      (set! ports (reverse (cdr ports)))))
  (let ((ans (apply proc ports)))
    (for-each close-port ports)
    ans))
(define (close-port port)
  (cond ((input-port? port)
	 (close-input-port port)
	 (if (output-port? port) (close-output-port port)))
	((output-port? port) (close-output-port port))
	(else (slib:error 'close-port 'port? port))))

(define (browse-url url)
  (define (try cmd end) (zero? (system (string-append cmd url end))))
  (or (try "netscape-remote -remote 'openURL(" ")'")
      (try "netscape -remote 'openURL(" ")'")
      (try "netscape '" "'&")
      (try "netscape '" "'")))

;;; "rationalize" adjunct procedures.
(define (find-ratio x e)
  (let ((rat (rationalize x e)))
    (list (numerator rat) (denominator rat))))
(define (find-ratio-between x y)
  (find-ratio (/ (+ x y) 2) (/ (- x y) 2)))

;;; CHAR-CODE-LIMIT is one greater than the largest integer which can
;;; be returned by CHAR->INTEGER.
(define char-code-limit 256)

;; MOST-POSITIVE-FIXNUM is used in modular.scm
(define most-positive-fixnum 536870911)

;;; Return argument
(define (identity x) x)

;;; SLIB:EVAL is single argument eval using the top-level (user) environment.
(define slib:eval eval)

(define-macro defmacro
  (lambda (f e)
    (let ((key (cadr f)) (pattern (caddr f)) (body (cdddr f)))
      (e `(define-macro ,key
	    (let ((%transformer (lambda ,pattern ,@body)))
	      (lambda (%form %expr)
		(%expr (apply %transformer (cdr %form)) %expr))))
	 e))))

(define (defmacro? m) (and (getprop m '*expander*) #t))

(define macroexpand-1 expand-once)

(define (macroexpand e)
  (if (pair? e) (let ((a (car e)))
		  (if (and (symbol? a) (getprop a '*expander*))
		      (macroexpand (expand-once e))
		      e))
      e))

(define gentemp
  (let ((*gensym-counter* -1))
    (lambda ()
      (set! *gensym-counter* (+ *gensym-counter* 1))
      (string->symbol
       (string-append "slib:G" (number->string *gensym-counter*))))))

(define defmacro:eval slib:eval)
(define defmacro:load load)
;;; If your implementation provides R4RS macros:
;(define macro:eval slib:eval)
;(define macro:load load)

(define slib:warn
  (lambda args
    (let ((cep (current-error-port)))
      (if (provided? 'trace) (print-call-stack cep))
      (display "Warn: " cep)
      (for-each (lambda (x) (display #\space cep) (write x cep)) args))))

;; define an error procedure for the library
(define slib:error
  (let ((error error))
    (lambda args
      (if (provided? 'trace) (print-call-stack (current-error-port)))
      (error 'slib-error: "~a"
	     (apply string-append
		    (map (lambda (a) (format " ~a" a)) args))))))

;; define these as appropriate for your system.
(define slib:tab (integer->char 9))
(define slib:form-feed (integer->char 12))

;;; bug fixes for Scheme->C (versions 28sep90, 23feb90, 01nov91):
(let ((vers (substring (cadr (implementation-information)) 0 7)))
  (if (or (string=? vers "28sep90") (string=? vers "23feb90")
	  (string=? vers "01nov91"))
      (begin
	;; GCD fails with 0 as argument
	(define old-gcd gcd)
	(set! gcd (lambda args
		    (apply old-gcd (remv! 0 args))))

	;; STRING->SYMBOL doesn't allocate a new string
	(set! string->symbol
	      (let ((fred string->symbol))
		(lambda (a) (fred (string-append a)))))

	;; NUMBER->STRING can generate a leading #?
	(set! number->string
	      (let ((fred number->string))
		(lambda (num . radix)
		  (let ((joe (apply fred num radix)))
		    (if (char=? #\# (string-ref joe 0))
			(substring joe 2 (string-length joe))
			joe)))))

	;; Another bug is bad expansion of LETREC when the body starts with a
	;; DEFINE as shown by test.scm -- not fixed here.
	)))

;;(define force force)

;;; Define SLIB:EXIT to be the implementation procedure to exit or
;;; return if exiting not supported.
(define slib:exit (lambda args (exit)))

;;; Here for backward compatability
(define scheme-file-suffix
  (let ((suffix (case (software-type)
		  ((nosve) "_scm")
		  (else ".scm"))))
    (lambda () suffix)))

;;; (SLIB:LOAD-SOURCE "foo") should load "foo.scm" or with whatever
;;; suffix all the module files in SLIB have.  See feature 'SOURCE.
(define (slib:load-source f) (load (string-append f (scheme-file-suffix))))

;;; (SLIB:LOAD-COMPILED "foo") should load the file that was produced
;;; by compiling "foo.scm" if this implementation can compile files.
;;; See feature 'COMPILED.
(define slib:load-compiled load)

;;; At this point SLIB:LOAD must be able to load SLIB files.
(define slib:load slib:load-source)

(slib:load (in-vicinity (library-vicinity) "require"))
; eof
