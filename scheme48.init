;;;"scheme48.init" Initialisation for SLIB for Scheme48	-*-scheme-*-
;;; Author: Aubrey Jaffer
;;;
;;; This code is in the public domain.

,batch on
,load-package floatnums
,config
,load =scheme48/misc/packages.scm

(define-structure slib:os-strings
  (export os-string->string)
  (open scheme
        (subset environments
                (*structure-ref environment-ref))
        (subset handle          (with-handler))
        (subset package-commands-internal
                (config-package)))
  (begin
    (define (identity x)
      x)
    (define (xstructure-ref structure-name export-name default)
      (call-with-current-continuation
       (lambda (k)
         (with-handler
          (lambda (condition decline)
            (k default))
          (lambda ()
            (*structure-ref (environment-ref (config-package)
                                             structure-name)
                            export-name))))))
    (define os-string->string
      (xstructure-ref 'os-strings 'os-string->string
                      identity))))

(define-structure slib-primitives
  (export s48-char->integer
	  s48-use!
	  s48-os-string->string
	  s48-getenv s48-current-time s48-time-seconds
	  (s48-access-mode :syntax)
	  s48-accessible?
	  s48-unlink
	  s48-system
	  s48-current-error-port
	  s48-force-output
	  s48-with-handler
	  s48-ascii->char
	  s48-error s48-warn
	  s48-exit)
  (open (modify scheme
                (rename (char->integer s48-char->integer)))
	;; for `s48-use!' procedure
	(subset ensures-loaded (ensure-loaded))
	(subset environments (environment-ref))
	(subset package-commands-internal (config-package))
	(subset package-mutation (package-open!))
	;; primitives
	(modify slib:os-strings
		(prefix s48-)
		(expose os-string->string))
	(modify posix
		(rename (current-time s48-current-time)
			(time-seconds s48-time-seconds)
			(lookup-environment-variable s48-getenv)))
	(modify posix-files
		(prefix s48-)
		(expose access-mode accessible? unlink))
	(modify c-system-function (rename (system s48-system)))
	(modify i/o
		(rename (current-error-port s48-current-error-port)
			(force-output s48-force-output)))
	(modify handle (rename (with-handler s48-with-handler)))
	(modify ascii  (rename (ascii->char s48-ascii->char)))
	(modify signals (rename (error s48-error) (warn s48-warn)))
	(modify root-scheduler (rename (scheme-exit-now s48-exit))))
  (begin
    ;; Here used to import builtin SRFI modules.
    (define (s48-use! struct-name)
      (let ((struc (environment-ref (config-package) struct-name)))
	(ensure-loaded struc)
	(package-open! (interaction-environment) (lambda () struc))))
    ))
,user
,open slib-primitives

(define (getenv name)
  (s48-os-string->string (s48-getenv name)))
(define system s48-system)

;;; (software-type) should be set to the generic operating system type.
;;; UNIX, VMS, MACOS, AMIGA and MS-DOS are supported.
(define (software-type) 'unix)

;;; (scheme-implementation-type) should return the name of the scheme
;;; implementation loading this file.
(define (scheme-implementation-type) 'Scheme48)

;;; (scheme-implementation-home-page) should return a (string) URI
;;; (Uniform Resource Identifier) for this scheme implementation's home
;;; page; or false if there isn't one.
(define (scheme-implementation-home-page) "http://s48.org/")

;;; (scheme-implementation-version) should return a string describing
;;; the version of the scheme implementation loading this file.
(define scheme-implementation-version
  (let ((version (getenv "S48_VERSION")))
    (define vl (string-length version))
    (do ((idx 0 (+ 1 idx)))
	((or (>= idx vl)
	     (not (or (char-numeric? (string-ref version idx))
		      (memv (string-ref version idx) '(#\. #\-)))))
	 (let ((nv (substring version 0 idx)))
	   (lambda () nv))))))

;;; (implementation-vicinity) should be defined to be the pathname of
;;; the directory where any auxiliary files to your Scheme
;;; implementation reside.
(define implementation-vicinity
  (let ((vic (getenv "S48_VICINITY")))
    (lambda () vic)))

;;; (library-vicinity) should be defined to be the pathname of the
;;; directory where files of Scheme library functions reside.
(define library-vicinity
  (let ((vic (getenv "SCHEME_LIBRARY_PATH")))
    (lambda () vic)))

;;; (home-vicinity) should return the vicinity of the user's HOME
;;; directory, the directory which typically contains files which
;;; customize a computer environment for a user.
;;;
;;; Ivan Shmakov points out that evaluating (getenv "HOME") when
;;; compiling captures the installer's home directory.  So delay until
;;; HOME-VICINITY is called.
(define (home-vicinity)
  (let ((home (getenv "HOME")))
    (and home
	 (if (eqv? #\/ (string-ref home (+ -1 (string-length home))))
	     home
	     (string-append home "/")))))
;@
(define in-vicinity string-append)
;@
(define (user-vicinity)
  (case (software-type)
    ((vms)	"[.]")
    (else	"")))

(define *load-pathname* #f)
;@
(define vicinity:suffix?
  (let ((suffi
	 (case (software-type)
	   ((amiga)				'(#\: #\/))
	   ((macos thinkc)			'(#\:))
	   ((ms-dos windows atarist os/2)	'(#\\ #\/))
	   ((nosve)				'(#\: #\.))
	   ((unix coherent plan9)		'(#\/))
	   ((vms)				'(#\: #\]))
	   (else
	    (slib:warn "require.scm" 'unknown 'software-type (software-type))
	    "/"))))
    (lambda (chr) (and (memv chr suffi) #t))))
;@
(define (pathname->vicinity pathname)
  (let loop ((i (- (string-length pathname) 1)))
    (cond ((negative? i) "")
	  ((vicinity:suffix? (string-ref pathname i))
	   (substring pathname 0 (+ i 1)))
	  (else (loop (- i 1))))))
(define (program-vicinity)
  (if *load-pathname*
      (pathname->vicinity *load-pathname*)
      (slib:error 'program-vicinity " called; use slib:load to load")))
;@
(define sub-vicinity
  (case (software-type)
    ((vms) (lambda (vic name)
	     (let ((l (string-length vic)))
	       (if (or (zero? (string-length vic))
		       (not (char=? #\] (string-ref vic (- l 1)))))
		   (string-append vic "[" name "]")
		   (string-append (substring vic 0 (- l 1))
				  "." name "]")))))
    (else (let ((*vicinity-suffix*
		 (case (software-type)
		   ((nosve) ".")
		   ((macos thinkc) ":")
		   ((ms-dos windows atarist os/2) "\\")
		   ((unix coherent plan9 amiga) "/"))))
	    (lambda (vic name)
	      (string-append vic name *vicinity-suffix*))))))
;@
(define (make-vicinity <pathname>) <pathname>)
;@
(define with-load-pathname
  (let ((exchange
	 (lambda (new)
	   (let ((old *load-pathname*))
	     (set! *load-pathname* new)
	     old))))
    (lambda (path thunk)
      (let ((old #f))
	(dynamic-wind
	    (lambda () (set! old (exchange path)))
	    thunk
	    (lambda () (exchange old)))))))

;;@ SLIB:FEATURES is a list of symbols naming the (SLIB) features
;;; initially supported by this implementation.
(define slib:features
      '(
	source				;can load scheme source files
					;(SLIB:LOAD-SOURCE "filename")
	compiled			;can load compiled files
					; here used for native modules
	vicinity
	srfi-59
	srfi-96

		       ;; Scheme report features
   ;; R5RS-compliant implementations should provide all 9 features.

	r5rs				;conforms to
	eval				;R5RS two-argument eval
	values				;R5RS multiple values
	dynamic-wind			;R5RS dynamic-wind
	macro				;R5RS high level macros
	delay				;has DELAY and FORCE
	multiarg-apply			;APPLY can take more than 2 args.
	char-ready?
	rev4-optional-procedures	;LIST-TAIL, STRING-COPY,
					;STRING-FILL!, and VECTOR-FILL!

      ;; These four features are optional in both R4RS and R5RS

;;;	multiarg/and-			;/ and - can take more than 2 args.
	rationalize
;;;	transcript			;TRANSCRIPT-ON and TRANSCRIPT-OFF
	with-file			;has WITH-INPUT-FROM-FILE and
					;WITH-OUTPUT-TO-FILE

	r4rs				;conforms to

	ieee-p1178			;conforms to

;;;	r3rs				;conforms to

;;;	rev2-procedures			;SUBSTRING-MOVE-LEFT!,
					;SUBSTRING-MOVE-RIGHT!,
					;SUBSTRING-FILL!,
					;STRING-NULL?, APPEND!, 1+,
					;-1+, <?, <=?, =?, >?, >=?
;;;	object-hash			;has OBJECT-HASH

	full-continuation		;can return multiple times
;;;	ieee-floating-point		;conforms to IEEE Standard 754-1985
					;IEEE Standard for Binary
					;Floating-Point Arithmetic.

			;; Other common features

;;;	srfi-0				;srfi-0, COND-EXPAND finds all srfi-*
;;;	sicp				;runs code from Structure and
					;Interpretation of Computer
					;Programs by Abelson and Sussman.
	defmacro			;has Common Lisp DEFMACRO
;;;	record				;has user defined data structures
;;;	string-port			;has CALL-WITH-INPUT-STRING and
					;CALL-WITH-OUTPUT-STRING
;;;	sort
;;;	pretty-print
;;;	object->string
;;;	format				;Common-lisp output formatting
;;;	trace				;has macros: TRACE and UNTRACE
;;;	compiler			;has (COMPILER)
;;;	ed				;(ED) is editor
	system				;posix (system <string>)
	getenv				;posix (getenv <string>)
;;;	program-arguments		;returns list of strings (argv)
	current-time			;returns time in seconds since 1/1/1970

		  ;; Implementation Specific features

	))

;;@ (FILE-POSITION <port> . <k>)
(define (file-position . args) #f)

;;; (OUTPUT-PORT-WIDTH <port>)
(define (output-port-width . arg) 79)

;;; (OUTPUT-PORT-HEIGHT <port>)
(define (output-port-height . arg) 24)

;;; (CURRENT-ERROR-PORT)
(define current-error-port s48-current-error-port)

;;; (TMPNAM) makes a temporary file name.
(define tmpnam
  (let ((cntr 100))
    (lambda () (set! cntr (+ 1 cntr))
	    (let ((tmp (string-append "slib_" (number->string cntr))))
	      (if (file-exists? tmp) (tmpnam) tmp)))))

;;; (FILE-EXISTS? <string>)
(define (file-exists? f)
  (s48-accessible? f (s48-access-mode exists)))

;;; (DELETE-FILE <string>)
(define (delete-file file-name)
  (call-with-current-continuation
   (lambda (k)
     (s48-with-handler
      (lambda (condition decline)
        (k #f))
      (lambda ()
	(s48-unlink file-name)
	#t)))))

;;; FORCE-OUTPUT flushes any pending output on optional arg output port
;;; use this definition if your system doesn't have such a procedure.
(define (force-output . arg)
  (s48-force-output
   (if (null? arg) (current-output-port) (car arg))))

(define (make-exchanger obj)
  (lambda (rep) (let ((old obj)) (set! obj rep) old)))

;@
(define (open-file filename modes)
  (call-with-current-continuation
   (lambda (k)
     (s48-with-handler
      (lambda (condition decline)
        (k #f))
      (case modes
        ((r rb) (lambda () (open-input-file  filename)))
        ((w wb) (lambda () (open-output-file filename)))
        (else (slib:error 'open-file 'mode? modes)))))))

(define (port? obj) (or (input-port? port) (output-port? port)))
(define (call-with-open-ports . ports)
  (define proc (car ports))
  (cond ((procedure? proc) (set! ports (cdr ports)))
	(else (set! ports (reverse ports))
	      (set! proc (car ports))
	      (set! ports (reverse (cdr ports)))))
  (let ((ans (apply proc ports)))
    (for-each close-port ports)
    ans))
(define (close-port port)
  (cond ((input-port? port)
	 (close-input-port port)
	 (if (output-port? port) (close-output-port port)))
	((output-port? port) (close-output-port port))
	(else (slib:error 'close-port 'port? port))))

(define (browse-url url)
  (define (try cmd) (eqv? 0 (system (sprintf #f cmd url))))
  (or (try "netscape-remote -remote 'openURL(%s)'")
      (try "netscape -remote 'openURL(%s)'")
      (try "netscape '%s'&")
      (try "netscape '%s'")))

;;; "rationalize" adjunct procedures.
(define (find-ratio x e)
  (let ((rat (rationalize x e)))
    (list (numerator rat) (denominator rat))))
(define (find-ratio-between x y)
  (find-ratio (/ (+ x y) 2) (/ (- x y) 2)))

;;; CHAR-CODE-LIMIT is one greater than the largest integer which can
;;; be returned by CHAR->INTEGER.
(define char-code-limit 128)
(define integer->char s48-ascii->char)
(define char->integer
  (let ((code0 (s48-char->integer (integer->char 0))))
    (lambda (char) (- (s48-char->integer char) code0))))

;;; MOST-POSITIVE-FIXNUM is used in modular.scm
(define most-positive-fixnum #x1FFFFFFF)

;;; Return argument
(define identity values)

;;; SLIB:EVAL is single argument eval using the top-level (user) environment.
(define slib:eval
  (let ((eval eval)
	(interaction-environment interaction-environment))
    (lambda (form)
      (eval form (interaction-environment)))))

(define *defmacros*
  (list (cons 'defmacro
	      (lambda (name parms . body)
		`(set! *defmacros* (cons (cons ',name (lambda ,parms ,@body))
					 *defmacros*))))))
(define (defmacro? m) (and (assq m *defmacros*) #t))

(define (macroexpand-1 e)
  (if (pair? e)
      (let ((a (car e)))
	(cond ((symbol? a) (set! a (assq a *defmacros*))
	       (if a (apply (cdr a) (cdr e)) e))
	      (else e)))
      e))

(define (macroexpand e)
  (if (pair? e)
      (let ((a (car e)))
	(cond ((symbol? a)
	       (set! a (assq a *defmacros*))
	       (if a (macroexpand (apply (cdr a) (cdr e))) e))
	      (else e)))
      e))

(define gentemp
  (let ((*gensym-counter* -1))
    (lambda ()
      (set! *gensym-counter* (+ *gensym-counter* 1))
      (string->symbol
       (string-append "slib:G" (number->string *gensym-counter*))))))

(define (slib:warn . args)
  ;;(if (provided? 'trace) (print-call-stack cep))
  (apply s48-warn args))

;;; define an error procedure for the library
(define (slib:error . args)
  ;;(if (provided? 'trace) (print-call-stack (current-error-port)))
  (apply s48-error args))

;;; define these as appropriate for your system.
(define slib:tab (s48-ascii->char 9))
(define slib:form-feed (s48-ascii->char 12))

;;; Support for older versions of Scheme.  Not enough code for its own file.
(define (last-pair l) (if (pair? (cdr l)) (last-pair (cdr l)) l))
(define t #t)
(define nil #f)

;;; Define these if your implementation's syntax can support them and if
;;; they are not already defined.

;;(define (1+ n) (+ n 1))
;;(define (-1+ n) (+ n -1))
;;(define 1- -1+)

;;; Define SLIB:EXIT to be the implementation procedure to exit or
;;; return if exiting not supported.
(define (slib:exit . opt)
  (s48-exit (if (pair? opt) (car opt) 0)))

;;; Here for backward compatability
(define scheme-file-suffix
  (case (software-type)
    ((nosve) (lambda () "_scm"))
    (else (lambda () ".scm"))))

;;; (SLIB:LOAD-SOURCE "foo") should load "foo.scm" or with whatever
;;; suffix all the module files in SLIB have.  See feature 'SOURCE.
(define (slib:load-source f) (load (string-append f (scheme-file-suffix))))

;;; (SLIB:LOAD-COMPILED "foo") should load the file that was produced
;;; by compiling "foo.scm" if this implementation can compile files.
;;; See feature 'COMPILED.
;;; See creation of "implcat" file at end of this file.
(define slib:load-compiled s48-use!)

;;; At this point SLIB:LOAD must be able to load SLIB files.
(define slib:load slib:load-source)

;;; If your implementation provides R4RS macros:
(define macro:eval slib:eval)
(define macro:load slib:load-source)

(define base:eval slib:eval)
(define (defmacro:eval x) (slib:eval (defmacro:expand* x)))
(define defmacro:load macro:load)

;;; If your implementation provides syntax-case macros:
;;(define syncase:eval slib:eval)
;;(define syncase:load slib:load-source)

;;; Scheme48 complains that these are not defined (even though they
;;; won't be called until they are).
(define synclo:load #f)
(define syncase:load #f)
(define macwork:load #f)
(define transcript-on #f)
(define transcript-off #f)

;;; Jacques Mequin wins the Spring 2001 SLIB extreme cleverness award:
(define-syntax defmacro
  (lambda (e r c)
    (let* ((e-fields (cdr e))
	   (macro-name (car e-fields))
	   (macro-args (cdr e-fields))
	   (slib-store (eval 'defmacro:eval (interaction-environment))))
      (slib-store `(defmacro ,macro-name ,@macro-args)))
    `(define-syntax ,(cadr e)
       (lambda (em rm cm)
	 (let ((macro-name ',(cadr e))
	       (macro-args (cdr em))
	       (slib-eval (eval 'macroexpand-1 (interaction-environment))))
	   (slib-eval `(,macro-name ,@macro-args)))))))

(slib:load (in-vicinity (library-vicinity) "require"))

;;; Needed to support defmacro
(require 'defmacroexpand)

;@
(define (current-time)
  (s48-time-seconds (s48-current-time)))
(define (difftime caltime1 caltime0)
  (- caltime1 caltime0))
(define (offset-time caltime offset)
  (+ caltime offset))

;;; Scheme48-specific code
,push
,config

;; 'record

(define-interface slib-record-interface
  (export record-modifier record-accessor record-constructor
          record-predicate make-record-type))

(define-structure slib-record slib-record-interface
  (open scheme record-types)
  (files ((=scheme48 slib) record)))

;; 'string-port

(define-interface slib-string-port-interface
  (export call-with-output-string call-with-input-string))

(define-structure slib-string-port slib-string-port-interface
  (open scheme extended-ports)
  (files ((=scheme48 slib) strport)))
,pop

;;; Write slib.image
(require #f)

,collect
,batch off
,dump slib.image "(slib 3b5)"

;;; Put Scheme48-specific code into catalog
(call-with-output-file (in-vicinity (implementation-vicinity) "implcat")
  (lambda (op)
    (define (display* . args)
      (for-each (lambda (arg) (display arg op)) args)
      (newline op))
    (display* "(")
    (for-each
     (lambda (idx)
       (define srfi
	 (string->symbol (string-append "srfi-" (number->string idx))))
       (display* " " (list srfi 'compiled srfi)))
     (append
      '(1 2 5 6 7 8 9 11 13 14 16 17 23 25 26 27 28 31 34 35 36 37 42 45)
      (if (string>=? (scheme-implementation-version) "1.4")
	  '(4 39 40 43 43 60 61 63 66 67 71 78)
	  '())
      (if (string>=? (scheme-implementation-version) "1.5") '(19) '())))
    (for-each
     (lambda (f)
       (define module
	 (string->symbol (string-append "slib-" (symbol->string f))))
       (display* " " (list f 'compiled module)))
     '(record string-port))
    (display* ")")))
(require 'new-catalog)

,exit
